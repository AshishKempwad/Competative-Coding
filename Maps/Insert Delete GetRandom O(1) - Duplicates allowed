class RandomizedCollection {

    private Map<Integer,Set<Integer>>mp;
    private List<Integer>list;
    private Random random; 

    public RandomizedCollection() {
        mp = new HashMap<>();
        list = new ArrayList<>();
        random = new Random();
    }
    
    public boolean insert(int val) {
        boolean isPresent = !mp.containsKey(val) || mp.get(val).isEmpty();
       
        mp.putIfAbsent(val,new HashSet<>());
        mp.get(val).add(list.size());
        list.add(val);

        return isPresent;
    }
    
    public boolean remove(int val) {
            if (!mp.containsKey(val) || mp.get(val).isEmpty()) {
            return false;
        }
        
        // Get the index of the element to remove
        int indexToRemove = mp.get(val).iterator().next();
        mp.get(val).remove(indexToRemove);

        // If the element to remove is the last element in the list, simply remove it
        if (indexToRemove < list.size() - 1) {
            // Get the last element in the list
            int lastElement = list.get(list.size() - 1);

            // Swap the element at indexToRemove with the last element
            list.set(indexToRemove, lastElement);

            // Update the map for the last element
            mp.get(lastElement).remove(list.size() - 1); // Remove the old index
            mp.get(lastElement).add(indexToRemove); // Add the new index
        }

        // Remove the last element from the list
        list.remove(list.size() - 1);

        return true;
    }
    
    public int getRandom() {
        int randomInt = random.nextInt(list.size());
        return list.get(randomInt);
    }
}

/**
 * Your RandomizedCollection object will be instantiated and called as such:
 * RandomizedCollection obj = new RandomizedCollection();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
